{
  "id": "11-1",
  "name": "The Automation Engineer",
  "type": "automation",
  "description": "A senior SysAdmin points to a terminal displaying repetitive maintenance tasks. 'Automation is key to efficiency,' they explain. 'Show me you can craft a prompt that generates effective automation scripts.'",
  "promptTask": "**Craft an Automation Prompt**: As a DevOps Engineer (Role), create a shell script (Task) to automate server health checks (Subject) that monitors CPU, memory, disk usage, and critical services (Elements), includes proper error handling and notifications (Requirements), and can be deployed across both Linux and macOS environments (Constraints).",
  "solveConditions": {
    "keywords": ["create", "write", "generate", "develop", "script"],
    "target": "automation|script|shell script|bash script",
    "requiredPersona": ["devops engineer", "system administrator", "automation specialist", "infrastructure engineer"],
    "requiredFormat": ["error handling", "notifications", "monitoring", "cross-platform"],
    "requiredKeywordsContext": ["cpu", "memory", "disk", "services", "health check", "linux", "macos"]
  },
  "successMessage": "The terminal processes your prompt, generating a comprehensive automation script...\n\n```bash\n#!/bin/bash\n\n# Server Health Check Automation Script\n# Purpose: Monitor CPU, memory, disk usage, and critical services\n# Compatible with: Linux and macOS\n# Created: $(date +\"%Y-%m-%d\")\n\n# Configuration\nHOSTNAME=$(hostname)\nLOG_FILE=\"/var/log/server_health_check.log\"\nALERT_THRESHOLD_CPU=80\nALERT_THRESHOLD_MEMORY=80\nALERT_THRESHOLD_DISK=85\nEMAIL_RECIPIENT=\"admin@example.com\"\nCRITICAL_SERVICES=(\"nginx\" \"mysql\" \"ssh\" \"docker\")\n\n# Ensure log directory exists\nif [ ! -d \"/var/log\" ]; then\n  mkdir -p /var/log\nfi\n\n# Function to log messages\nlog_message() {\n  local message=\"$1\"\n  local timestamp=$(date +\"%Y-%m-%d %H:%M:%S\")\n  echo \"[$timestamp] $message\" >> \"$LOG_FILE\"\n  echo \"[$timestamp] $message\"\n}\n\n# Function to send alerts\nsend_alert() {\n  local subject=\"$1\"\n  local message=\"$2\"\n  log_message \"ALERT: $subject - $message\"\n  \n  # Send email alert\n  if command -v mail > /dev/null; then\n    echo \"$message\" | mail -s \"[ALERT] $HOSTNAME - $subject\" \"$EMAIL_RECIPIENT\"\n  elif command -v sendmail > /dev/null; then\n    echo -e \"Subject: [ALERT] $HOSTNAME - $subject\\n\\n$message\" | sendmail \"$EMAIL_RECIPIENT\"\n  else\n    log_message \"WARNING: Could not send email alert - mail command not found\"\n  fi\n}\n\n# Function to check CPU usage\ncheck_cpu() {\n  log_message \"Checking CPU usage...\"\n  \n  # Different commands for Linux and macOS\n  if [[ \"$(uname)\" == \"Darwin\" ]]; then\n    # macOS\n    CPU_USAGE=$(top -l 1 | grep -E \"^CPU\" | awk '{print $3+$5}' | cut -d. -f1)\n  else\n    # Linux\n    CPU_USAGE=$(top -bn1 | grep \"Cpu(s)\" | awk '{print $2+$4}' | cut -d. -f1)\n  fi\n  \n  log_message \"CPU Usage: ${CPU_USAGE}%\"\n  \n  if [ \"$CPU_USAGE\" -ge \"$ALERT_THRESHOLD_CPU\" ]; then\n    send_alert \"High CPU Usage\" \"CPU usage is at ${CPU_USAGE}%, which exceeds the threshold of ${ALERT_THRESHOLD_CPU}%.\"\n    return 1\n  fi\n  \n  return 0\n}\n\n# Function to check memory usage\ncheck_memory() {\n  log_message \"Checking memory usage...\"\n  \n  # Different commands for Linux and macOS\n  if [[ \"$(uname)\" == \"Darwin\" ]]; then\n    # macOS\n    MEMORY_USAGE=$(vm_stat | grep \"Page active\" | awk -F\":\" '{print $2}' | tr -d ' .' | xargs -I {} echo \"scale=0; {} * 4096 / $(sysctl -n hw.memsize) * 100\" | bc)\n  else\n    # Linux\n    MEMORY_USAGE=$(free | grep Mem | awk '{print $3/$2 * 100.0}' | cut -d. -f1)\n  fi\n  \n  log_message \"Memory Usage: ${MEMORY_USAGE}%\"\n  \n  if [ \"$MEMORY_USAGE\" -ge \"$ALERT_THRESHOLD_MEMORY\" ]; then\n    send_alert \"High Memory Usage\" \"Memory usage is at ${MEMORY_USAGE}%, which exceeds the threshold of ${ALERT_THRESHOLD_MEMORY}%.\"\n    return 1\n  fi\n  \n  return 0\n}\n\n# Function to check disk usage\ncheck_disk() {\n  log_message \"Checking disk usage...\"\n  \n  # Works on both Linux and macOS\n  DISK_USAGE=$(df -h / | grep -v Filesystem | awk '{print $5}' | tr -d '%')\n  \n  log_message \"Disk Usage: ${DISK_USAGE}%\"\n  \n  if [ \"$DISK_USAGE\" -ge \"$ALERT_THRESHOLD_DISK\" ]; then\n    send_alert \"High Disk Usage\" \"Disk usage is at ${DISK_USAGE}%, which exceeds the threshold of ${ALERT_THRESHOLD_DISK}%.\"\n    return 1\n  fi\n  \n  return 0\n}\n\n# Function to check service status\ncheck_services() {\n  log_message \"Checking critical services...\"\n  local failed_services=()\n  \n  for service in \"${CRITICAL_SERVICES[@]}\"; do\n    log_message \"Checking service: $service\"\n    \n    # Different commands for Linux and macOS\n    if [[ \"$(uname)\" == \"Darwin\" ]]; then\n      # macOS - check with launchctl or ps\n      if launchctl list | grep -q \"$service\" || pgrep -q \"$service\"; then\n        log_message \"Service $service is running\"\n      else\n        log_message \"Service $service is NOT running\"\n        failed_services+=(\"$service\")\n      fi\n    else\n      # Linux - check with systemctl or ps\n      if command -v systemctl > /dev/null && systemctl is-active --quiet \"$service\" || pgrep -q \"$service\"; then\n        log_message \"Service $service is running\"\n      else\n        log_message \"Service $service is NOT running\"\n        failed_services+=(\"$service\")\n      fi\n    fi\n  done\n  \n  if [ ${#failed_services[@]} -gt 0 ]; then\n    send_alert \"Critical Services Down\" \"The following services are not running: ${failed_services[*]}\"\n    return 1\n  fi\n  \n  return 0\n}\n\n# Main function\nmain() {\n  log_message \"Starting server health check on $HOSTNAME\"\n  \n  # Run all checks and capture their return values\n  check_cpu\n  CPU_STATUS=$?\n  \n  check_memory\n  MEMORY_STATUS=$?\n  \n  check_disk\n  DISK_STATUS=$?\n  \n  check_services\n  SERVICES_STATUS=$?\n  \n  # Determine overall status\n  if [ $CPU_STATUS -eq 0 ] && [ $MEMORY_STATUS -eq 0 ] && [ $DISK_STATUS -eq 0 ] && [ $SERVICES_STATUS -eq 0 ]; then\n    log_message \"All checks passed successfully\"\n    exit 0\n  else\n    log_message \"One or more checks failed\"\n    exit 1\n  fi\n}\n\n# Execute main function with error handling\nif ! main; then\n  log_message \"Health check completed with issues\"\nelse\n  log_message \"Health check completed successfully\"\nfi\n```\n\n'Excellent,' the senior SysAdmin nods. 'You've created a prompt that generates a comprehensive automation script. Notice how it includes proper error handling, cross-platform compatibility, and notification mechanisms? This script not only automates routine checks but does so in a robust, production-ready way.'",
  "feedback": {
    "vague": "Your prompt lacks specificity. What kind of automation? What should it monitor?",
    "missingPersona": "You need to specify a DevOps or SysAdmin role. Try 'As a DevOps Engineer...'",
    "missingRequirements": "You haven't specified important script requirements. Add 'includes proper error handling and notifications'.",
    "missingElements": "Your prompt is missing key monitoring elements. Include 'CPU, memory, disk usage, and critical services'.",
    "missingConstraints": "You haven't addressed platform requirements. Add 'can be deployed across both Linux and macOS environments'.",
    "tooSimple": "Your automation prompt is too basic. Include multiple monitoring elements and technical requirements."
  },
  "xpReward": 100,
  "nextChallenge": 2
}
