{
  "id": "11-2",
  "name": "The Documentation Specialist",
  "type": "documentation",
  "description": "A senior SysAdmin points to a terminal displaying a complex system configuration. 'Clear documentation is essential for system reliability,' they explain. 'Show me you can craft a prompt that creates comprehensive technical documentation.'",
  "promptTask": "**Craft a Documentation Prompt**: As a Technical Documentation Specialist (Role), create a system administration guide (Task) for a Linux web server running NGINX, MySQL, and PHP (Subject) that includes installation procedures, configuration settings, security hardening, and troubleshooting steps (Elements), written for both new and experienced administrators (Audience), with clear examples and command references (Format).",
  "solveConditions": {
    "keywords": ["create", "write", "document", "develop", "generate"],
    "target": "documentation|guide|manual|reference|instructions",
    "requiredPersona": ["technical documentation specialist", "technical writer", "documentation engineer", "system documentation"],
    "requiredFormat": ["clear examples", "command references", "step-by-step", "comprehensive"],
    "requiredKeywordsContext": ["installation", "configuration", "security", "troubleshooting", "nginx", "mysql", "php"]
  },
  "successMessage": "The terminal processes your prompt, generating comprehensive technical documentation...\n\n```markdown\n# Linux Web Server Administration Guide\n\n## System Overview\n\nThis guide covers the administration of a Linux web server running NGINX, MySQL, and PHP (LEMP stack). It is designed for both new administrators learning the system and experienced professionals seeking reference information.\n\n## Table of Contents\n\n1. [Installation Procedures](#installation-procedures)\n2. [Configuration Settings](#configuration-settings)\n3. [Security Hardening](#security-hardening)\n4. [Routine Maintenance](#routine-maintenance)\n5. [Troubleshooting](#troubleshooting)\n6. [Reference](#reference)\n\n## Installation Procedures\n\n### System Requirements\n\n- Ubuntu 20.04 LTS or CentOS 8\n- Minimum 2GB RAM, 4GB recommended\n- 20GB disk space minimum\n- Network connectivity with public IP or proper port forwarding\n\n### NGINX Installation\n\n#### Ubuntu\n\n```bash\n# Update package lists\nsudo apt update\n\n# Install NGINX\nsudo apt install -y nginx\n\n# Enable and start NGINX service\nsudo systemctl enable nginx\nsudo systemctl start nginx\n\n# Verify installation\nsudo systemctl status nginx\n```\n\n#### CentOS\n\n```bash\n# Install EPEL repository\nsudo dnf install -y epel-release\n\n# Install NGINX\nsudo dnf install -y nginx\n\n# Enable and start NGINX service\nsudo systemctl enable nginx\nsudo systemctl start nginx\n\n# Verify installation\nsudo systemctl status nginx\n```\n\n### MySQL Installation\n\n#### Ubuntu\n\n```bash\n# Install MySQL\nsudo apt install -y mysql-server\n\n# Secure the installation\nsudo mysql_secure_installation\n\n# Verify installation\nsudo systemctl status mysql\n```\n\n#### CentOS\n\n```bash\n# Install MySQL\nsudo dnf install -y mysql-server\n\n# Enable and start MySQL service\nsudo systemctl enable mysqld\nsudo systemctl start mysqld\n\n# Secure the installation\nsudo mysql_secure_installation\n\n# Verify installation\nsudo systemctl status mysqld\n```\n\n### PHP Installation\n\n#### Ubuntu\n\n```bash\n# Install PHP and required extensions\nsudo apt install -y php-fpm php-mysql php-json php-curl php-gd php-mbstring php-xml php-zip\n\n# Enable and start PHP-FPM service\nsudo systemctl enable php-fpm\nsudo systemctl start php-fpm\n\n# Verify installation\nsudo systemctl status php-fpm\nphp -v\n```\n\n#### CentOS\n\n```bash\n# Install PHP and required extensions\nsudo dnf install -y php php-fpm php-mysqlnd php-json php-curl php-gd php-mbstring php-xml php-zip\n\n# Enable and start PHP-FPM service\nsudo systemctl enable php-fpm\nsudo systemctl start php-fpm\n\n# Verify installation\nsudo systemctl status php-fpm\nphp -v\n```\n\n## Configuration Settings\n\n### NGINX Configuration\n\n#### Main Configuration File\n\nThe main NGINX configuration file is located at `/etc/nginx/nginx.conf`. This file controls global settings.\n\nKey settings to review:\n\n```nginx\nworker_processes auto;  # Set to number of CPU cores for optimal performance\nworker_connections 1024;  # Maximum simultaneous connections per worker\nclient_max_body_size 100M;  # Maximum upload size\nkeepalive_timeout 65;  # Connection timeout\ngzip on;  # Enable compression\n```\n\n#### Server Block Configuration\n\nServer blocks (virtual hosts) are defined in `/etc/nginx/sites-available/` and enabled by linking to `/etc/nginx/sites-enabled/` (Ubuntu) or directly in `/etc/nginx/conf.d/` (CentOS).\n\nBasic PHP-enabled server block:\n\n```nginx\nserver {\n    listen 80;\n    server_name example.com www.example.com;\n    root /var/www/example.com;\n    index index.php index.html index.htm;\n\n    location / {\n        try_files $uri $uri/ /index.php?$args;\n    }\n\n    location ~ \\.php$ {\n        include snippets/fastcgi-php.conf;\n        fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;\n    }\n\n    location ~ /\\.ht {\n        deny all;\n    }\n}\n```\n\n### MySQL Configuration\n\nThe main MySQL configuration file is located at `/etc/mysql/mysql.conf.d/mysqld.cnf` (Ubuntu) or `/etc/my.cnf` (CentOS).\n\nKey settings to review:\n\n```ini\n[mysqld]\nmax_connections = 150\ninnodb_buffer_pool_size = 512M  # Set to 50-70% of available RAM\ninnodb_log_file_size = 128M\nquery_cache_size = 64M\nquery_cache_type = 1\nkey_buffer_size = 32M\n```\n\n### PHP Configuration\n\nThe main PHP configuration file is located at `/etc/php/7.4/fpm/php.ini` (Ubuntu) or `/etc/php.ini` (CentOS).\n\nKey settings to review:\n\n```ini\nmemory_limit = 256M\nmax_execution_time = 60\nupload_max_filesize = 64M\npost_max_size = 64M\ndate.timezone = UTC\nopache.enable = 1\n```\n\n## Security Hardening\n\n### Firewall Configuration\n\n#### Ubuntu (UFW)\n\n```bash\n# Enable firewall\nsudo ufw enable\n\n# Allow SSH, HTTP, and HTTPS\nsudo ufw allow ssh\nsudo ufw allow http\nsudo ufw allow https\n\n# Verify rules\nsudo ufw status\n```\n\n#### CentOS (firewalld)\n\n```bash\n# Enable firewall\nsudo systemctl enable firewalld\nsudo systemctl start firewalld\n\n# Allow SSH, HTTP, and HTTPS\nsudo firewall-cmd --permanent --add-service=ssh\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\n\n# Apply changes\nsudo firewall-cmd --reload\n\n# Verify rules\nsudo firewall-cmd --list-all\n```\n\n### NGINX Security Settings\n\nAdd the following to your NGINX server blocks:\n\n```nginx\n# Hide NGINX version\nserver_tokens off;\n\n# Add security headers\nadd_header X-Content-Type-Options nosniff;\nadd_header X-Frame-Options SAMEORIGIN;\nadd_header X-XSS-Protection \"1; mode=block\";\nadd_header Content-Security-Policy \"default-src 'self';\";\n\n# Enable HTTPS\nlisten 443 ssl;\nssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;\nssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;\nssl_protocols TLSv1.2 TLSv1.3;\nssl_prefer_server_ciphers on;\nssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;\n```\n\n### MySQL Security Settings\n\n```bash\n# Remove anonymous users\nmysql -u root -p -e \"DELETE FROM mysql.user WHERE User='';\"\n\n# Disable remote root login\nmysql -u root -p -e \"DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');\"\n\n# Remove test database\nmysql -u root -p -e \"DROP DATABASE IF EXISTS test;\"\nmysql -u root -p -e \"DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%';\"\n\n# Flush privileges\nmysql -u root -p -e \"FLUSH PRIVILEGES;\"\n```\n\n### PHP Security Settings\n\nUpdate the following in php.ini:\n\n```ini\n# Disable dangerous functions\ndisable_functions = exec,passthru,shell_exec,system,proc_open,popen,curl_exec,curl_multi_exec,parse_ini_file,show_source\n\n# Hide PHP version and info\nexpose_php = Off\n\n# Restrict file uploads to specific directories\nopen_basedir = /var/www/:/tmp/\n\n# Enable SQL safe mode\nsql.safe_mode = On\n```\n\n## Routine Maintenance\n\n### Backup Procedures\n\n#### Database Backup\n\n```bash\n# Create backup directory\nsudo mkdir -p /var/backups/mysql\n\n# Backup all databases\nsudo mysqldump --all-databases --single-transaction --quick --lock-tables=false > /var/backups/mysql/full-backup-$(date +%F).sql -u root -p\n\n# Backup specific database\nsudo mysqldump --databases dbname --single-transaction --quick --lock-tables=false > /var/backups/mysql/dbname-backup-$(date +%F).sql -u root -p\n```\n\n#### File Backup\n\n```bash\n# Backup web files\nsudo tar -czf /var/backups/www-backup-$(date +%F).tar.gz /var/www/\n\n# Backup configuration files\nsudo tar -czf /var/backups/config-backup-$(date +%F).tar.gz /etc/nginx/ /etc/mysql/ /etc/php/\n```\n\n### Update Procedures\n\n#### Ubuntu\n\n```bash\n# Update package lists\nsudo apt update\n\n# Upgrade packages\nsudo apt upgrade -y\n\n# Restart services\nsudo systemctl restart nginx mysql php-fpm\n```\n\n#### CentOS\n\n```bash\n# Update packages\nsudo dnf update -y\n\n# Restart services\nsudo systemctl restart nginx mysqld php-fpm\n```\n\n## Troubleshooting\n\n### NGINX Issues\n\n#### Check NGINX Status\n\n```bash\n# Check if NGINX is running\nsudo systemctl status nginx\n\n# Test configuration syntax\nsudo nginx -t\n\n# Check error logs\nsudo tail -n 100 /var/log/nginx/error.log\n```\n\n#### Common NGINX Problems\n\n1. **403 Forbidden Error**\n   - Check file permissions: `ls -la /var/www/example.com`\n   - Ensure NGINX user has read access: `sudo chown -R www-data:www-data /var/www/example.com`\n\n2. **502 Bad Gateway**\n   - Check if PHP-FPM is running: `sudo systemctl status php-fpm`\n   - Verify PHP-FPM socket path in NGINX config matches actual path\n   - Check PHP-FPM error logs: `sudo tail -n 100 /var/log/php-fpm/error.log`\n\n### MySQL Issues\n\n#### Check MySQL Status\n\n```bash\n# Check if MySQL is running\nsudo systemctl status mysql\n\n# Check error logs\nsudo tail -n 100 /var/log/mysql/error.log\n```\n\n#### Common MySQL Problems\n\n1. **Can't Connect to MySQL Server**\n   - Check if MySQL is running: `sudo systemctl status mysql`\n   - Verify credentials: `mysql -u username -p`\n   - Check bind address in configuration: should be `127.0.0.1` for local or `0.0.0.0` for remote\n\n2. **MySQL Server Has Gone Away**\n   - Increase `max_allowed_packet` in MySQL configuration\n   - Increase `wait_timeout` value\n   - Check for long-running queries: `SHOW FULL PROCESSLIST;`\n\n### PHP Issues\n\n#### Check PHP Status\n\n```bash\n# Check if PHP-FPM is running\nsudo systemctl status php-fpm\n\n# Check PHP version and modules\nphp -v\nphp -m\n\n# Check PHP-FPM error logs\nsudo tail -n 100 /var/log/php-fpm/error.log\n```\n\n#### Common PHP Problems\n\n1. **PHP Scripts Not Executing**\n   - Verify PHP-FPM is running: `sudo systemctl status php-fpm`\n   - Check NGINX configuration for PHP processing block\n   - Ensure file permissions allow execution: `sudo chmod 755 /var/www/example.com`\n\n2. **Memory Limit Errors**\n   - Increase `memory_limit` in php.ini\n   - Restart PHP-FPM after changes: `sudo systemctl restart php-fpm`\n\n## Reference\n\n### File Locations\n\n| Component | Configuration Files | Log Files | Data Directory |\n|-----------|---------------------|-----------|---------------|\n| NGINX | `/etc/nginx/` | `/var/log/nginx/` | `/var/www/` |\n| MySQL | `/etc/mysql/` | `/var/log/mysql/` | `/var/lib/mysql/` |\n| PHP | `/etc/php/7.4/` | `/var/log/php-fpm/` | N/A |\n\n### Common Commands\n\n| Task | Command |\n|------|--------|\n| Restart NGINX | `sudo systemctl restart nginx` |\n| Restart MySQL | `sudo systemctl restart mysql` |\n| Restart PHP-FPM | `sudo systemctl restart php-fpm` |\n| Check NGINX config | `sudo nginx -t` |\n| MySQL console | `mysql -u root -p` |\n| View PHP info | `php -i` |\n| Check open ports | `sudo ss -tulpn` |\n| Monitor processes | `htop` |\n| View real-time logs | `sudo tail -f /var/log/nginx/error.log` |\n```\n\n'Excellent,' the senior SysAdmin nods. 'You've created a prompt that generates comprehensive technical documentation. Notice how it includes both installation procedures and troubleshooting steps, with clear examples for different distributions? Good documentation like this is essential for maintaining system reliability and knowledge transfer.'",
  "feedback": {
    "vague": "Your prompt lacks specificity. What kind of documentation? What systems should it cover?",
    "missingPersona": "You need to specify a documentation role. Try 'As a Technical Documentation Specialist...'",
    "missingFormat": "You haven't specified how the documentation should be structured. Add 'with clear examples and command references'.",
    "missingElements": "Your prompt is missing key documentation elements. Include 'installation procedures, configuration settings, security hardening, and troubleshooting steps'.",
    "missingAudience": "You haven't specified who the documentation is for. Add 'written for both new and experienced administrators'.",
    "tooSimple": "Your documentation prompt is too basic. Include multiple technical components and documentation sections."
  },
  "xpReward": 100,
  "nextChallenge": null
}
