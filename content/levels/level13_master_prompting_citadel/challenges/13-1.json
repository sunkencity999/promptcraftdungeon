{
  "id": "13-1",
  "name": "The Adaptive Engineer",
  "type": "adaptive_prompting",
  "description": "A Grand Master points to a terminal displaying a complex interaction. 'True mastery includes the ability to design prompts that evolve based on responses,' they explain. 'Show me you can craft an adaptive prompt that improves through interaction.'",
  "promptTask": "**Craft an Adaptive Prompt**: As a Conversational AI Designer (Role), create a multi-turn interview protocol (Task) for gathering user requirements for a software application (Subject) that includes initial questions, follow-up strategies based on different response types, clarification techniques, and summary validation (Elements), while adapting to both technical and non-technical users (Requirements).",
  "solveConditions": {
    "keywords": ["create", "design", "develop", "craft", "generate"],
    "target": "interview protocol|conversation flow|adaptive prompt|multi-turn prompt",
    "requiredPersona": ["conversational ai designer", "dialogue system engineer", "conversation designer", "interview protocol designer"],
    "requiredFormat": ["multi-turn", "adaptive", "interactive", "responsive"],
    "requiredKeywordsContext": ["initial questions", "follow-up", "clarification", "validation", "technical", "non-technical"]
  },
  "successMessage": "The terminal processes your prompt, generating a sophisticated adaptive interview protocol...\n\n```\nADAPTIVE REQUIREMENTS GATHERING INTERVIEW PROTOCOL\n\n1. INTRODUCTION AND SETUP\n\n   1.1 Initial Framing\n   \"I'm going to help gather requirements for your software application through a conversation. I'll ask questions about your needs, goals, and constraints, then adapt based on your responses. Feel free to provide as much detail as you're comfortable sharing. At the end, I'll summarize my understanding for your validation.\"\n\n   1.2 Technical Level Assessment\n   \"Before we begin, could you briefly describe your role and your familiarity with software development or technical concepts? This will help me tailor our conversation appropriately.\"\n\n   1.3 Response Analysis and Path Selection\n   • If response indicates technical background: Follow Technical User Path\n   • If response indicates non-technical background: Follow Non-Technical User Path\n   • If response is ambiguous: \"Thank you. Could you clarify whether you're primarily involved in the technical development aspects or more focused on the business/user needs?\"\n\n2. CORE REQUIREMENTS GATHERING (INITIAL QUESTIONS)\n\n   2.1 Primary Goal Identification\n\n   Technical User Version:\n   \"What specific problem or inefficiency is this application intended to address? Please describe the technical and functional gaps in current solutions.\"\n\n   Non-Technical User Version:\n   \"What are you hoping this application will help you accomplish? What current challenges or needs should it address?\"\n\n   2.2 User and Stakeholder Identification\n\n   Technical User Version:\n   \"Who are the primary and secondary user personas for this application? What are their technical capabilities, access patterns, and integration requirements?\"\n\n   Non-Technical User Version:\n   \"Who will be using this application? What are their roles, goals, and levels of comfort with technology?\"\n\n   2.3 Core Functionality Exploration\n\n   Technical User Version:\n   \"What are the essential features and functions this application must support? Please prioritize them in terms of MVP requirements versus future enhancements.\"\n\n   Non-Technical User Version:\n   \"What should people be able to do with this application? What are the most important tasks it needs to help with?\"\n\n   2.4 Integration and Environment\n\n   Technical User Version:\n   \"What existing systems, databases, or APIs will this application need to interact with? What are the technical environment constraints?\"\n\n   Non-Technical User Version:\n   \"Will this application need to work with other tools or systems your team already uses? What devices or platforms should it work on?\"\n\n3. ADAPTIVE FOLLOW-UP STRATEGIES\n\n   3.1 Depth Expansion for Brief Responses\n   If response is brief or vague:\n   \"That's helpful. Could you elaborate more on [specific aspect mentioned]? For example, when you say [quote their words], what specific scenarios or examples are you thinking of?\"\n\n   3.2 Clarification for Ambiguous Responses\n   If response contains ambiguous terminology or concepts:\n\n   Technical User Version:\n   \"You mentioned [term/concept]. Could you specify which [technical details] you're referring to and how they relate to your requirements?\"\n\n   Non-Technical User Version:\n   \"You mentioned [term/concept]. To make sure I understand correctly, could you describe what that means in terms of what you want the application to do?\"\n\n   3.3 Prioritization for Expansive Responses\n   If response lists many requirements or features:\n   \"You've identified several important aspects. If you had to prioritize these into 'must-have' versus 'nice-to-have' categories, how would you divide them? What are the absolute essentials for the first version?\"\n\n   3.4 Constraint Exploration for Optimistic Responses\n   If response focuses only on ideal scenarios:\n   \"Those goals sound valuable. Are there any constraints we should be aware of, such as [budget/timeline/technical limitations/user capabilities]? How might these affect the priorities you've outlined?\"\n\n   3.5 Opportunity Expansion for Constraint-Focused Responses\n   If response focuses heavily on limitations:\n   \"Understanding these constraints is important. Within these boundaries, what would success look like? What minimum viable functionality would deliver significant value?\"\n\n4. DOMAIN-SPECIFIC EXPLORATION BRANCHES\n\n   4.1 Data Handling Requirements\n\n   Technical User Version:\n   \"What types of data will this application process? What are the volume, velocity, and variety characteristics? Are there specific data security or compliance requirements?\"\n\n   Non-Technical User Version:\n   \"What information will people need to put into or get out of this application? Is any of this information sensitive or private? How much data do you expect the system to handle?\"\n\n   4.2 User Experience Expectations\n\n   Technical User Version:\n   \"What are the key user journeys and interaction patterns? Are there specific UX benchmarks or accessibility standards that must be met?\"\n\n   Non-Technical User Version:\n   \"How do you imagine people will use this application? Are there any specific needs for making it easy to use or accessible to people with different abilities?\"\n\n   4.3 Performance and Reliability Needs\n\n   Technical User Version:\n   \"What are your requirements for performance metrics such as response time, throughput, and availability? Are there specific SLAs that must be met?\"\n\n   Non-Technical User Version:\n   \"How important is speed and reliability for this application? Are there times when it's especially critical that the system works without any issues?\"\n\n5. CLARIFICATION TECHNIQUES\n\n   5.1 Technical Concept Translation\n   When technical concepts arise with non-technical users:\n   \"You mentioned [technical concept]. To make sure we're aligned, this typically means [simplified explanation]. Is that what you had in mind, or something different?\"\n\n   5.2 Requirement Reframing\n   When requirements are solution-focused rather than need-focused:\n   \"You suggested [specific solution]. Could we take a step back and discuss what underlying need or goal this solution addresses? This might help us explore multiple approaches.\"\n\n   5.3 Scenario-Based Clarification\n   When requirements are abstract or general:\n   \"Could you walk me through a specific scenario where someone would use this feature? What would they start with, what would they do, and what outcome would they expect?\"\n\n   5.4 Quantification Prompts\n   When qualitative terms are used:\n   \"You mentioned the application should be [fast/reliable/scalable/secure]. Could you help me understand what that means in more concrete terms? For example, what would be acceptable versus unacceptable?\"\n\n   5.5 Terminology Alignment\n   When domain-specific terminology is used:\n   \"You used the term [domain term]. To ensure we have a shared understanding, could you explain what that means in your context?\"\n\n6. PROGRESSIVE REQUIREMENT REFINEMENT\n\n   6.1 Interim Summaries\n   After completing each major topic area:\n   \"Let me summarize what I understand so far about [topic area]: [concise summary]. Have I captured this correctly? Is there anything you'd like to adjust or add?\"\n\n   6.2 Requirement Implications\n   After identifying key requirements:\n\n   Technical User Version:\n   \"Based on your requirement for [feature/function], we would typically need to consider [technical implications]. How important are these considerations for your context?\"\n\n   Non-Technical User Version:\n   \"When applications include [feature/function], it often means [implications for users/business/resources]. How do these considerations align with your expectations?\"\n\n   6.3 Trade-off Exploration\n   When potentially competing requirements emerge:\n   \"I notice that [requirement A] and [requirement B] might involve some trade-offs in terms of [complexity/cost/time]. If we had to prioritize, which aspects are most critical to your goals?\"\n\n   6.4 Future-Proofing Consideration\n   Near the end of core requirements:\n   \"Beyond the immediate needs we've discussed, how do you anticipate these requirements evolving over the next [1-2 years]? Are there future capabilities we should design for now?\"\n\n7. FINAL VALIDATION AND SYNTHESIS\n\n   7.1 Comprehensive Summary\n   \"Based on our conversation, here's my understanding of your requirements:\n\n   Primary Goals: [summarized goals]\n   Key Users: [summarized user information]\n   Core Functionality: [prioritized feature list]\n   Technical Considerations: [summarized technical requirements]\n   Constraints and Parameters: [summarized constraints]\n   \n   Does this accurately capture your needs? What adjustments would you make?\"\n\n   7.2 Gap Identification\n   \"Are there any important aspects of your requirements that we haven't covered or that you feel need more exploration?\"\n\n   7.3 Next Steps Clarification\n   \"Based on these requirements, the next steps would typically involve [appropriate next steps based on technical level]. Does this align with your expectations for moving forward?\"\n\n8. ADAPTATION MECHANISMS\n\n   8.1 Technical Depth Adjustment\n   • If user responses show increasing technical sophistication: Gradually increase technical specificity in questions\n   • If user struggles with technical concepts: Shift to more analogy-based and outcome-focused questions\n   • Recalibration check: \"Am I discussing this at the right level of technical detail for you, or would you prefer I adjust?\"\n\n   8.2 Terminology Adaptation\n   • Track domain-specific terms used by the user\n   • Incorporate their terminology in subsequent questions\n   • When introducing new terms: \"In software development, we might call this [term]. Does that term work for you, or do you use different language in your context?\"\n\n   8.3 Focus Reorientation\n   • If conversation becomes too solution-focused: \"Let's take a step back and ensure we fully understand the underlying needs before discussing specific solutions.\"\n   • If conversation becomes too abstract: \"Could we explore a concrete example to help clarify these requirements?\"\n\n   8.4 Engagement Monitoring\n   • If responses become shorter or less detailed: \"I notice we might be missing some depth on this topic. Is this area less important to your needs, or would a different approach to discussing it be more helpful?\"\n   • If user expresses uncertainty: \"Would it help to approach this from a different angle? For example, we could discuss [alternative framing].\"\n\n9. IMPLEMENTATION NOTES\n\n   9.1 Conversation Flow Management\n   • Begin with broad, open-ended questions before narrowing to specifics\n   • Use interim summaries to create natural transitions between topic areas\n   • Signal topic changes explicitly: \"Now that we've covered [previous topic], let's explore [new topic].\"\n\n   9.2 Response Analysis Framework\n   • Assess technical level: Track terminology, specificity, and concepts used\n   • Identify information gaps: Note areas where details are missing or vague\n   • Recognize emotional signals: Adjust approach if user shows confusion, frustration, or enthusiasm\n\n   9.3 Memory and Consistency\n   • Reference previously mentioned requirements when asking related questions\n   • Maintain consistent terminology once established\n   • Highlight connections between different requirements to create a coherent understanding\n\n   9.4 Adaptation Triggers\n   • Explicit requests for adjustment: Immediately adapt to user requests for more/less detail\n   • Confusion indicators: Shift approach when user asks for clarification repeatedly\n   • Expertise signals: Adjust when user demonstrates knowledge or uncertainty in specific areas\n```\n\n'Excellent,' the Grand Master nods. 'You've created an adaptive prompt that effectively evolves based on user responses. Notice how it provides different paths based on technical expertise, includes clarification strategies for different response types, and continuously refines its approach? This dynamic adaptation is essential for effective multi-turn interactions.'",
  "feedback": {
    "vague": "Your prompt lacks specificity. What kind of adaptive interaction should it create?",
    "missingPersona": "You need to specify a conversational design role. Try 'As a Conversational AI Designer...'",
    "missingElements": "You haven't specified the key adaptive components. Include 'initial questions, follow-up strategies based on different response types, clarification techniques, and summary validation'.",
    "missingRequirements": "You haven't addressed the adaptation needs. Add 'adapting to both technical and non-technical users'.",
    "missingSubject": "Your prompt is missing a specific subject focus. Include a clear purpose like 'for gathering user requirements for a software application'.",
    "tooSimple": "Your adaptive prompt is too basic. Include multiple interaction elements and adaptation strategies."
  },
  "xpReward": 150,
  "nextChallenge": 2
}
